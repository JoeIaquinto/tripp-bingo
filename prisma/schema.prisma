// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_PRISMA_URL")
    directUrl = env("DATABASE_URL_NON_POOLING")
}

model BingoSquare {
    id        Int      @id @default(autoincrement())
    content      String
    isActive Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    bingoUserSquares UserBingoGameSquare[]

    @@index([content])
}

model BingoGame {
    id       Int @id @default(autoincrement())
    title    String
    nhlGameId String @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userBingoGames    UserBingoGame[]
}

model UserBingoGame {
    id        Int      @id @default(autoincrement())
    bingoGameId    Int
    userId    String
    hasBingo Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    squares   UserBingoGameSquare[]
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

    bingoGame BingoGame @relation(fields: [bingoGameId], references: [id], onDelete: Cascade)
    @@unique([userId, bingoGameId])
}

model UserBingoGameSquare {
    id        Int      @id @default(autoincrement())
    userBingoGameId    Int
    bingoSquareId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userBingoGame UserBingoGame @relation(fields: [userBingoGameId], references: [id], onDelete: Cascade)
    bingoSquare BingoSquare @relation(fields: [bingoSquareId], references: [id], onDelete: Cascade)
    @@unique([userBingoGameId, bingoSquareId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?
    accounts      Account[]
    sessions      Session[]
    userBingoGames UserBingoGame[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
